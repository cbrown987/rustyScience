{"$message_type":"diagnostic","message":"overflow evaluating the requirement `&ArrayBase<_, _>: Not`","code":{"code":"E0275","explanation":"An evaluation of a trait requirement overflowed.\n\nErroneous code example:\n\n```compile_fail,E0275\ntrait Foo {}\n\nstruct Bar<T>(T);\n\nimpl<T> Foo for T where Bar<T>: Foo {}\n```\n\nThis error occurs when there was a recursive trait requirement that overflowed\nbefore it could be evaluated. This often means that there is an unbounded\nrecursion in resolving some type bounds.\n\nTo determine if a `T` is `Foo`, we need to check if `Bar<T>` is `Foo`. However,\nto do this check, we need to determine that `Bar<Bar<T>>` is `Foo`. To\ndetermine this, we check if `Bar<Bar<Bar<T>>>` is `Foo`, and so on. This is\nclearly a recursive requirement that can't be resolved directly.\n\nConsider changing your trait bounds so that they're less self-referential.\n"},"level":"error","spans":[{"file_name":"src/linear_models/multiple_linear_regression.rs","byte_start":644,"byte_end":647,"line_start":22,"line_end":22,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"        let xtx = xt.dot(&x_with_bias);","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider increasing the recursion limit by adding a `#![recursion_limit = \"16384\"]` attribute to your crate (`rusty_science`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&ArrayBase<_, _>` to implement `Not`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"8191 redundant requirements hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&ArrayBase<ViewRepr<&f64>, Dim<[usize; 3]>>` to implement `Not`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0275]\u001b[0m\u001b[0m\u001b[1m: overflow evaluating the requirement `&ArrayBase<_, _>: Not`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/linear_models/multiple_linear_regression.rs:22:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let xtx = xt.dot(&x_with_bias);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider increasing the recursion limit by adding a `#![recursion_limit = \"16384\"]` attribute to your crate (`rusty_science`)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&ArrayBase<_, _>` to implement `Not`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 8191 redundant requirements hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&ArrayBase<ViewRepr<&f64>, Dim<[usize; 3]>>` to implement `Not`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"overflow evaluating the requirement `&ArrayBase<_, _>: Not`","code":{"code":"E0275","explanation":"An evaluation of a trait requirement overflowed.\n\nErroneous code example:\n\n```compile_fail,E0275\ntrait Foo {}\n\nstruct Bar<T>(T);\n\nimpl<T> Foo for T where Bar<T>: Foo {}\n```\n\nThis error occurs when there was a recursive trait requirement that overflowed\nbefore it could be evaluated. This often means that there is an unbounded\nrecursion in resolving some type bounds.\n\nTo determine if a `T` is `Foo`, we need to check if `Bar<T>` is `Foo`. However,\nto do this check, we need to determine that `Bar<Bar<T>>` is `Foo`. To\ndetermine this, we check if `Bar<Bar<Bar<T>>>` is `Foo`, and so on. This is\nclearly a recursive requirement that can't be resolved directly.\n\nConsider changing your trait bounds so that they're less self-referential.\n"},"level":"error","spans":[{"file_name":"src/linear_models/multiple_linear_regression.rs","byte_start":1397,"byte_end":1400,"line_start":44,"line_end":44,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"        x_with_bias.dot(&self.coefficients)","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider increasing the recursion limit by adding a `#![recursion_limit = \"16384\"]` attribute to your crate (`rusty_science`)","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&ArrayBase<_, _>` to implement `Not`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"8191 redundant requirements hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&ArrayBase<OwnedRepr<f64>, Dim<[usize; 3]>>` to implement `Not`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0275]\u001b[0m\u001b[0m\u001b[1m: overflow evaluating the requirement `&ArrayBase<_, _>: Not`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/linear_models/multiple_linear_regression.rs:44:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        x_with_bias.dot(&self.coefficients)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider increasing the recursion limit by adding a `#![recursion_limit = \"16384\"]` attribute to your crate (`rusty_science`)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&ArrayBase<_, _>` to implement `Not`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 8191 redundant requirements hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&ArrayBase<OwnedRepr<f64>, Dim<[usize; 3]>>` to implement `Not`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0275`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0275`.\u001b[0m\n"}
